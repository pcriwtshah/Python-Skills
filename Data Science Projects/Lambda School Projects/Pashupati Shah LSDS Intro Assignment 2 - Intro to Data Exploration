{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pashupati Shah LSDS Intro Assignment 2 - Intro to Data Exploration","version":"0.3.2","provenance":[{"file_id":"1klzjBonq6-eFeHvaAlwb9HMnkgBg-X2I","timestamp":1551977466003},{"file_id":"1EEWBpWvMRIdJF9b81ZnIuVhoZSL45P5w","timestamp":1535495742354}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"dJNVAHIX8XCi","colab_type":"text"},"cell_type":"markdown","source":["## 1) Copy the notebook to your google account."]},{"metadata":{"id":"ViAyRUAM8cMo","colab_type":"text"},"cell_type":"markdown","source":["## 2) Import the pandas library and alias it as \"pd\"."]},{"metadata":{"id":"Kd_nusDS98v7","colab_type":"code","colab":{}},"cell_type":"code","source":["import pandas as pd"],"execution_count":0,"outputs":[]},{"metadata":{"id":"YjCgT50E8zPu","colab_type":"text"},"cell_type":"markdown","source":["## 3) Read in the CSV dataset that is found at the following URL:\n","[DATASET HERE](https://raw.githubusercontent.com/ryanleeallred/datasets/master/messy-data.csv)\n"]},{"metadata":{"id":"HzEBd-hz99Ma","colab_type":"code","colab":{}},"cell_type":"code","source":["df = pd.read_csv('https://raw.githubusercontent.com/ryanleeallred/datasets/master/messy-data.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Mu1IYH3g9EF3","colab_type":"text"},"cell_type":"markdown","source":["## 4) Print out the shape as well as the first 5 rows of the dataframe."]},{"metadata":{"id":"ZLnVdtLW99vN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":206},"outputId":"942d6758-3ed5-4795-9143-75220849bd51","executionInfo":{"status":"ok","timestamp":1551981300309,"user_tz":300,"elapsed":449,"user":{"displayName":"Pashupati Shah","photoUrl":"https://lh3.googleusercontent.com/-D4xdYKKvxB4/AAAAAAAAAAI/AAAAAAAAG-o/AI1ooq2zzJY/s64/photo.jpg","userId":"16897557531239350642"}}},"cell_type":"code","source":["df.shape\n","df.head()"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>alpha</th>\n","      <th>beta</th>\n","      <th>gamma</th>\n","      <th>delta</th>\n","      <th>epsilon</th>\n","      <th>zeta</th>\n","      <th>eta</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>48</td>\n","      <td>12</td>\n","      <td>240</td>\n","      <td>3.0</td>\n","      <td>Yes</td>\n","      <td>AZ</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>46</td>\n","      <td>18</td>\n","      <td>230</td>\n","      <td>5.0</td>\n","      <td>NaN</td>\n","      <td>VT</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>44</td>\n","      <td>24</td>\n","      <td>220</td>\n","      <td>7.0</td>\n","      <td>No</td>\n","      <td>PA</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>42</td>\n","      <td>30</td>\n","      <td>210</td>\n","      <td>9.0</td>\n","      <td>Yes</td>\n","      <td>OK</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>44</td>\n","      <td>36</td>\n","      <td>220</td>\n","      <td>11.0</td>\n","      <td>Yes</td>\n","      <td>MD</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   alpha  beta  gamma  delta  epsilon zeta eta\n","0      2    48     12    240      3.0  Yes  AZ\n","1      3    46     18    230      5.0  NaN  VT\n","2      4    44     24    220      7.0   No  PA\n","3      5    42     30    210      9.0  Yes  OK\n","4      6    44     36    220     11.0  Yes  MD"]},"metadata":{"tags":[]},"execution_count":21}]},{"metadata":{"id":"lQXA62rd9OWM","colab_type":"text"},"cell_type":"markdown","source":["## 5) Print out the datatypes of the dataframe columns (dataset features)."]},{"metadata":{"id":"5hPgdg0W9-1j","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":156},"outputId":"a78d9e1b-aedd-4f1a-e45a-a0bcff80de14","executionInfo":{"status":"ok","timestamp":1551979285052,"user_tz":300,"elapsed":3532,"user":{"displayName":"Pashupati Shah","photoUrl":"https://lh3.googleusercontent.com/-D4xdYKKvxB4/AAAAAAAAAAI/AAAAAAAAG-o/AI1ooq2zzJY/s64/photo.jpg","userId":"16897557531239350642"}}},"cell_type":"code","source":["df.dtypes"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["alpha        int64\n","beta         int64\n","gamma        int64\n","delta        int64\n","epsilon    float64\n","zeta        object\n","eta         object\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":8}]},{"metadata":{"id":"WcMnUSW5fb9b","colab_type":"text"},"cell_type":"markdown","source":["## 6) Print out the summary statistics of the numeric values of your dataset i.e. min, max, mean, standard deviation, etc."]},{"metadata":{"id":"4Np346ECfn0i","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":300},"outputId":"5d4cd97e-789e-4b96-a0de-a7c75f800850","executionInfo":{"status":"ok","timestamp":1551979327935,"user_tz":300,"elapsed":615,"user":{"displayName":"Pashupati Shah","photoUrl":"https://lh3.googleusercontent.com/-D4xdYKKvxB4/AAAAAAAAAAI/AAAAAAAAG-o/AI1ooq2zzJY/s64/photo.jpg","userId":"16897557531239350642"}}},"cell_type":"code","source":["df.describe()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>alpha</th>\n","      <th>beta</th>\n","      <th>gamma</th>\n","      <th>delta</th>\n","      <th>epsilon</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>165.000000</td>\n","      <td>165.000000</td>\n","      <td>165.000000</td>\n","      <td>165.000000</td>\n","      <td>141.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>46.169697</td>\n","      <td>17.921212</td>\n","      <td>277.018182</td>\n","      <td>89.606061</td>\n","      <td>164.794326</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>24.371521</td>\n","      <td>17.769180</td>\n","      <td>146.229125</td>\n","      <td>88.845900</td>\n","      <td>96.430843</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>2.000000</td>\n","      <td>-11.000000</td>\n","      <td>12.000000</td>\n","      <td>-55.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>28.000000</td>\n","      <td>7.000000</td>\n","      <td>168.000000</td>\n","      <td>35.000000</td>\n","      <td>83.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>44.000000</td>\n","      <td>15.000000</td>\n","      <td>264.000000</td>\n","      <td>75.000000</td>\n","      <td>163.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>65.000000</td>\n","      <td>32.000000</td>\n","      <td>390.000000</td>\n","      <td>160.000000</td>\n","      <td>247.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>85.000000</td>\n","      <td>50.000000</td>\n","      <td>510.000000</td>\n","      <td>250.000000</td>\n","      <td>331.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            alpha        beta       gamma       delta     epsilon\n","count  165.000000  165.000000  165.000000  165.000000  141.000000\n","mean    46.169697   17.921212  277.018182   89.606061  164.794326\n","std     24.371521   17.769180  146.229125   88.845900   96.430843\n","min      2.000000  -11.000000   12.000000  -55.000000    3.000000\n","25%     28.000000    7.000000  168.000000   35.000000   83.000000\n","50%     44.000000   15.000000  264.000000   75.000000  163.000000\n","75%     65.000000   32.000000  390.000000  160.000000  247.000000\n","max     85.000000   50.000000  510.000000  250.000000  331.000000"]},"metadata":{"tags":[]},"execution_count":9}]},{"metadata":{"id":"m2KFAh6T97-t","colab_type":"text"},"cell_type":"markdown","source":["## 6) Clean all NaN values from the dataset.\n","\n","Feel free to add code cells as needed."]},{"metadata":{"id":"9fkfvv5ELfuE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":156},"outputId":"e19c434e-80bb-440b-f1fe-095c9b67ceeb","executionInfo":{"status":"ok","timestamp":1551981126278,"user_tz":300,"elapsed":687,"user":{"displayName":"Pashupati Shah","photoUrl":"https://lh3.googleusercontent.com/-D4xdYKKvxB4/AAAAAAAAAAI/AAAAAAAAG-o/AI1ooq2zzJY/s64/photo.jpg","userId":"16897557531239350642"}}},"cell_type":"code","source":["null_values = df.isnull()\n","null_values.sum()"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["alpha       0\n","beta        0\n","gamma       0\n","delta       0\n","epsilon    24\n","zeta       19\n","eta         0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":15}]},{"metadata":{"id":"bZ2MoaiIRrRA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":382},"outputId":"51069cc9-89b5-4455-dbe2-eb8eabee8c09","executionInfo":{"status":"ok","timestamp":1551981410365,"user_tz":300,"elapsed":404,"user":{"displayName":"Pashupati Shah","photoUrl":"https://lh3.googleusercontent.com/-D4xdYKKvxB4/AAAAAAAAAAI/AAAAAAAAG-o/AI1ooq2zzJY/s64/photo.jpg","userId":"16897557531239350642"}}},"cell_type":"code","source":["df_copy = df.zeta.fillna(0.1)\n","df_copy.head(20)"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     Yes\n","1     0.1\n","2      No\n","3     Yes\n","4     Yes\n","5      No\n","6     Yes\n","7      No\n","8     Yes\n","9      No\n","10     No\n","11     No\n","12    Yes\n","13     No\n","14    Yes\n","15    Yes\n","16    0.1\n","17     No\n","18    Yes\n","19    Yes\n","Name: zeta, dtype: object"]},"metadata":{"tags":[]},"execution_count":23}]},{"metadata":{"id":"wP7BDqcwLauI","colab_type":"text"},"cell_type":"markdown","source":["## 6.1) Describe how you addressed the NaN values and give an explanation justifying your decision."]},{"metadata":{"id":"WMyNKMBa-Vsb","colab_type":"code","colab":{}},"cell_type":"code","source":["##### Your Code Here #####"],"execution_count":0,"outputs":[]},{"metadata":{"id":"FkbRxM2cS9pq","colab_type":"text"},"cell_type":"markdown","source":["I changed all NaN values by 0.1 using 'fillna' funcion."]},{"metadata":{"id":"ln9-44Jg-V6d","colab_type":"text"},"cell_type":"markdown","source":["## 7) Create scatter plots using Matplotlib. Can you find any interesting relationships in the data? Be sure to label your axis and to give your graphs a title.\n","\n","Screenshot cool graphs that you create and share them with the slack channel. \n","\n","Don't forget to import matplotlib before trying to use it."]},{"metadata":{"id":"eeJwN6OBLUyv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":364},"outputId":"389cc24d-03ab-4c74-e782-09d1b80c97d0","executionInfo":{"status":"ok","timestamp":1551981754415,"user_tz":300,"elapsed":652,"user":{"displayName":"Pashupati Shah","photoUrl":"https://lh3.googleusercontent.com/-D4xdYKKvxB4/AAAAAAAAAAI/AAAAAAAAG-o/AI1ooq2zzJY/s64/photo.jpg","userId":"16897557531239350642"}}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.scatter(df['alpha'], df['beta'])"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7fc70cfe3ef0>"]},"metadata":{"tags":[]},"execution_count":27},{"output_type":"display_data","data":{"image/png":"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\nWltbRYfpCs899xzGjh0LAMyBAPF4HH/4wx+wc+dObNu2DW+99RbzIMDrr7+Oq6++Gq+88gqefvrp\nwX5hzZo12LVrF3p7e/HOO++IDrNkUnfIbW1taG5uBgBMnDgRXV1d6O3tFRyVe9xyyy14+umnAQDB\nYBCJRAIHDx7EggULAADz5s1DW1ubyBBd4eOPP8aJEycwd+5cAGAOBGhra8PMmTNRV1eHaDSKxx57\njHkQIBQK4fz58wCA7u5ujBs3DqdOnRocOVU9D1J3yB0dHQiFQoM/19fXo729XWBE7uLxeFBTUwMA\naG1txe23345EIjE4LBcOh5kPGzz55JN4+OGHB39mDuz36aefIplM4r777kMsFkNbWxvzIMB3vvMd\nfPbZZ/j2t7+N73//+1i1ahWCweDgv6ueB+nnkIdilU8x9u7di9bWVrz00ku44447Bo8zH9Z74403\ncNNNN+GKK67Q/XfmwD7nz5/Hs88+i88++wx33333sHvPPNjjr3/9K8aPH48XX3wRH330ER544AEE\nAoHBf1c9D1J3yNFoFB0dHYM/nz17FpFIRGBE7vPuu+9i27Zt2L59OwKBAGpqapBMJuH3+3HmzBlE\no1HRITra/v37cfLkSezfvx+ff/45vF4vcyBAOBzGjBkzUFVVhSuvvBK1tbXweDzMg83++c9/4rbb\nbgMAXHfdddA0DZlMZvDfVc+D1EPWt956K3bv3g0A+PDDDxGNRlFXVyc4Kvfo6enBpk2b8Pzzz2Pc\nuHEAgFmzZg3mZM+ePZg9e7bIEB3vqaeewp///Gf86U9/wl133YX777+fORDgtttuw4EDB9Df3494\nPI6+vj7mQYAJEybg/fffBwCcOnUKtbW1mDhxIg4fPgxA/TxIv9vT7373Oxw+fBgVFRVYt24drrvu\nOtEhuUZLSwueeeYZXH311YPHnnjiCaxduxaapmH8+PF4/PHHUV1dLTBK93jmmWdw+eWX47bbbsPq\n1auZA5vt2rVrcCX1z372M0ybNo15sNmFCxewZs0adHZ2IpPJYOXKlYhEInj00UfR39+P6dOn45FH\nHhEdZsmk75CJiIjcQOohayIiIrdgh0xERCQBdshEREQSYIdMREQkAXbIREREEmCHTEREJAF2yERE\nRBJgh0xERCSB/w8Mh3i96evhvQAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 576x396 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"yo4YDnjpmdAj","colab_type":"text"},"cell_type":"markdown","source":["## 8) STRETCH GOAL (Extra Credit)\n","\n","Machine Learning algorithms don't do well with categorical values that are represented by strings. In order to have this dataset completely cleaned we need to transform the categorical variables that are represented as strings into numeric categorical variables\n","\n","- **Turn all categorical features (columns) into numeric features**\n","\n","Hints:\n","\n","[Scikit-Learn One-Hot-Encoder](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html)\n","\n","[Pandas Docs - Working with Categorical Data](https://pandas.pydata.org/pandas-docs/stable/categorical.html)\n","\n","[Guide to Encoding Categorical Variables in Python](http://pbpython.com/categorical-encoding.html)"]}]}